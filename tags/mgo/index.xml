<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mgo on Daryl&#39;s Blog</title>
    <link>https://siskinc.github.io/tags/mgo/</link>
    <description>Recent content in mgo on Daryl&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jul 2019 17:35:04 +0000</lastBuildDate><atom:link href="https://siskinc.github.io/tags/mgo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang mgo 模糊查询的使用</title>
      <link>https://siskinc.github.io/post/Golang_mgo_%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 25 Jul 2019 17:35:04 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/Golang_mgo_%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>在日常使用的Mongodb中，有一项功能叫做模糊查询（使用正则匹配），例如:
db.article.find({&amp;quot;title&amp;quot;: {$regex: /a/, $options: &amp;quot;im&amp;quot;}})这是我们常用Mongodb的命令行使用的方式，但是在mgo中做出类似的方式视乎是行不通的：
1 2 3  query := bson.M{&amp;#34;title&amp;#34;: bson.M{&amp;#34;$regex&amp;#34;: &amp;#34;/a/&amp;#34;, &amp;#34;$options&amp;#34;: &amp;#34;im&amp;#34;}}   大家用这个方式去查询，能查询到算我输！
下面总结一下，正真使用的方式：
 在Mongodb的命令行中，我们可以使用形如 \abcd\ 的方式来作为我们的pattern，但是在mgo是直接传入字符串来进行的，也就是传入的是&amp;quot;\a&amp;quot;，而不是\a\。   根据第一点，我们将代码修改一下。
 1 2 3  query := bson.M{&amp;#34;title&amp;#34;: bson.M{&amp;#34;$regex&amp;#34;: &amp;#34;a&amp;#34;, &amp;#34;$options&amp;#34;: &amp;#34;im&amp;#34;}}    但是我们会发现依然不能得到我们想要的结果，那么第二点就会产生了！
 在mgo中要用到模糊查询需要mgo中自带的一个结构: bson.RegEx  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // RegEx represents a regular expression.</description>
    </item>
    
  </channel>
</rss>
