<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on Daryl&#39;s Blog</title>
    <link>https://siskinc.github.io/tags/http/</link>
    <description>Recent content in http on Daryl&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Apr 2020 22:00:23 +0000</lastBuildDate><atom:link href="https://siskinc.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP 与 HTTPS 的区别</title>
      <link>https://siskinc.github.io/post/http_%E4%B8%8E_https_%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 25 Apr 2020 22:00:23 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/http_%E4%B8%8E_https_%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。
为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。
基本概念 HTTP  是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。
 HTTPS  是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。
 主要作用   建立一个信息安全通道，来保证数据传输的安全
  另一种就是确认网站的真实性。
  HTTP与HTTPS区别   https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
  http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
  http和https使用的是完全不同的连接方式，默认端口也不一样，前者是80，后者是443。
  http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。
  SSL加密方式 SSL协议既用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL对传输内容使用对称加密。
对称加密  速度高，可加密内容较大，用来加密会话过程中的消息
 公钥加密  加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥
 HTTPS工作原理 单向验证与双向验证的区别 单向验证： 指客户端验证服务器端证书，服务器并不需要验证客户端证书。
双向验证：指客户端验证服务器端证书，而服务器也需要通过CA的公钥证书来验证客户端证书。
单向认证 Https在建立Socket连接之前，需要进行握手，具体过程如下：

  客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息;
  服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书;
  客户端使用服务端返回的信息验证服务器的合法性，包括：
  证书是否过期;
  发行服务器证书的CA是否可靠;(通过查询浏览器或本机内的CA证书)
  返回的公钥是否能正确解开返回证书中的数字签名;（通过使用本机或浏览器内置的CA公钥进行解密）</description>
    </item>
    
    <item>
      <title>golang http.client 的 Connection reset by peer 问题</title>
      <link>https://siskinc.github.io/post/golang_http.client_%E7%9A%84_connection_reset_by_peer_%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Nov 2019 00:28:26 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/golang_http.client_%E7%9A%84_connection_reset_by_peer_%E9%97%AE%E9%A2%98/</guid>
      <description>func main() { req, err := http.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;http://www.baidu.com&amp;#34;,nil ) if err != nil { log.Errorf(&amp;#34;&amp;#34;) } req.Close = true resp, err := http.Client.Do(req) } func main() { req, err := http.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;http://www.baidu.com&amp;#34;,nil ) if err != nil { log.Errorf(&amp;#34;&amp;#34;) } req.Header.Add(&amp;#34;Connection&amp;#34;, &amp;#34;close&amp;#34;) resp, err := http.Client.Do(req) } func main() { tr := http.Transport{DisableKeepAlives: true} client := http.Client{Transport: &amp;amp;tr} resp, err := client.Get(&amp;#34;https://www.baidu.com/&amp;#34;) if resp != nil { defer resp.Body.Close() } checkError(err) fmt.</description>
    </item>
    
  </channel>
</rss>
