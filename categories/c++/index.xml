<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Daryl&#39;s Blog</title>
    <link>https://siskinc.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Daryl&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jul 2019 17:44:31 +0000</lastBuildDate><atom:link href="https://siskinc.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RTTI</title>
      <link>https://siskinc.github.io/post/rtti/</link>
      <pubDate>Thu, 25 Jul 2019 17:44:31 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/rtti/</guid>
      <description>RTTI是”Runtime Type Information”的缩写，意思是运行时类型信息，它提供了运行时确定对象类型的方法。
 typeid函数  对于c++的内置数据类型，typeid可以方便的输出它们的数据类型。
 #include &amp;lt;iostream&amp;gt; #include &amp;lt;typeinfo&amp;gt; using namespace std; int main() { short s = 2; unsigned ui = 10; int i = 10; char ch = &amp;#39;a&amp;#39;; wchar_t wch = L&amp;#39;b&amp;#39;; float f = 1.0f; double d = 2; cout&amp;lt;&amp;lt;typeid(s).name()&amp;lt;&amp;lt;endl; // short  cout&amp;lt;&amp;lt;typeid(ui).name()&amp;lt;&amp;lt;endl; // unsigned int  cout&amp;lt;&amp;lt;typeid(i).name()&amp;lt;&amp;lt;endl; // int  cout&amp;lt;&amp;lt;typeid(ch).name()&amp;lt;&amp;lt;endl; // char  cout&amp;lt;&amp;lt;typeid(wch).name()&amp;lt;&amp;lt;endl; // wchar_t  cout&amp;lt;&amp;lt;typeid(f).name()&amp;lt;&amp;lt;endl; // float  cout&amp;lt;&amp;lt;typeid(d).</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 中不能声明为虚函数的函数有哪些？</title>
      <link>https://siskinc.github.io/post/cplusplus_%E4%B8%AD%E4%B8%8D%E8%83%BD%E5%A3%B0%E6%98%8E%E4%B8%BA%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E6%9C%89%E5%93%AA%E4%BA%9B/</link>
      <pubDate>Thu, 25 Jul 2019 17:03:49 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/cplusplus_%E4%B8%AD%E4%B8%8D%E8%83%BD%E5%A3%B0%E6%98%8E%E4%B8%BA%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E6%9C%89%E5%93%AA%E4%BA%9B/</guid>
      <description>普通函数  普通函数（非成员函数）只能被overload，不能被override，而且编译器会在编译时绑定函数。
 多态的运行期行为体现在虚函数上，虚函数通过继承方式来体现出多态作用，顶层函数不属于成员函数，是不能被继承的
构造函数  因为构造函数本来就是为了明确初始化对象成员才产生的，然而virtual function主要是为了在不完全了解细节的情况下也能正确处理对象。另外，virtual函数是在不同类型的对象产生不同的动作，现在对象还没有产生，如何使用virtual函数来完成你想完成的动作。
 内联成员函数  内联函数就是为了在代码中直接展开，减少函数调用花费的代价，虚函数是为了在继承后对象能够准确的执行自己的动作，这是不可能统一的。
 静态成员函数  静态成员函数对于每个类来说只有一份代码，所有的对象都共享这一份代码，他也没有要动态邦定的必要性。不能被继承，只属于该类。
 友元函数  C++不支持友元函数的继承，对于没有继承特性的函数没有虚函数的说法。友元函数不属于类的成员函数，不能被继承。
 </description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::string 在一个字符串前插入一个字符串几种方式</title>
      <link>https://siskinc.github.io/post/cplusplus_stdstring_%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 25 Jul 2019 17:03:24 +0000</pubDate>
      
      <guid>https://siskinc.github.io/post/cplusplus_stdstring_%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>1、直接使用字符串相加 std::string a = &amp;quot;hello&amp;quot;;std::string b = &amp;quot;hello&amp;quot;;for(int i = 0; i &amp;lt; 100; ++i){a = b + a;}2、使用insert函数 std::string a = &amp;quot;hello&amp;quot;;for(int i = 0; i &amp;lt; 100; ++i){a.insert(0, &amp;quot;hello&amp;quot;);}比较：通过Quick C++ Benchmarks 可得到结果 static void StringCreation(benchmark::State&amp;amp; state) {// Code inside this loop is measured repeatedlystd::string x = &amp;quot;hello&amp;quot;;for (auto _ : state) {x.</description>
    </item>
    
  </channel>
</rss>
